#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 6.7 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 32 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 104 0 1 #"\0"
0 75 1 #"\0"
0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 6 #"Menlo\0"
0 14 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 192 46 214 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 57 89 216 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
16 #"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
37 #"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
36 #"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
38 #"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 255 255 0 -1 -1 0
1 #"\0"
0 75 10 #"Monospace\0"
0.0 12 90 -1 90 -1 3 -1 0 1 0 1 0 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 150 0 150 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 175 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 38 38 128 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 194 116 31 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 41 128 38 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 132 60 36 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 81 112 203 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 178 34 34 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 68 0 203 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 116 0 0 0
0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 142 28 0
0 0 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0.0 0.0 0.0 0.0 0.0 0.0 255 165 0 0
0 0 -1 -1 4 32 #"widget.rkt::browser-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 59
#"macro-debugger/syntax-browser/properties color-text% basic\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 75 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 190 190 190
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 255 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 107 142 35 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 100 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 139 0 0 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 100 149 237
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 65 105 225 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 70 130 180 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 47 79 79 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 139 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 75 0 130 0 0
0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 160 32 240 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 255 165 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 250 128 114
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 184 134 11 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 128 128 0 0
0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 169 169 169
0 0 0 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 0 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
0.0 11 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 50 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 51 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0.0 0.0 0.0 0.0 0.0 0.0 0 0 0 255
255 255 -1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0.0 0.0 0.0 1.0 1.0 1.0 200 0 0 0 0
0 -1 -1           0 1518 0 17 3 27 #";; ** The MUWAE interpreter"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 29 3 11 #"#lang pl 03"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #"#| BNF for the MUWAE language:"
0 0 17 29 1 #"\n"
0 0 17 3 22 #"     <MUWAE> ::= <num>"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"             | { + <MUWAE> <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"             | { - <MUWAE> <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"             | { * <MUWAE> <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 36 #"             | { / <MUWAE> <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 12 #"            "
0 0 17 3 19 #" | { sqrt <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 48 #"             | { with { <id> <MUWAE> } <MUWAE> }"
0 0 17 29 1 #"\n"
0 0 17 3 19 #"             | <id>"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";; MUWAE abstract syntax trees"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 11 #"define-type"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"Num"
0 0 25 3 3 #"  ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"Add"
0 0 25 3 2 #"  "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"Sub"
0 0 25 3 2 #"  "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"Mul"
0 0 25 3 2 #"  "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 3 #"Div"
0 0 25 3 2 #"  "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"Sqrt"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 2 #"Id"
0 0 25 3 3 #"   "
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ["
0 0 14 3 4 #"With"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"Sexpr"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; parses s-expressions into MUWAEs"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"number:"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Num"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 7 #"symbol:"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 2 #"Id"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"cons"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"with"
0 0 25 3 1 #" "
0 0 14 3 4 #"more"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 15 3 5 #"match"
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"       [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"with"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 7 #"symbol:"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #") "
0 0 14 3 5 #"named"
0 0 25 3 2 #") "
0 0 14 3 4 #"body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ("
0 0 14 3 4 #"With"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 5 #"named"
0 0 25 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 4 #"body"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 8 #"       ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 19 3 25 #"\"bad `with' syntax in ~s\""
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 3 4 #")])]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"+"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"Add"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"Sub"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"*"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"Mul"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 1 #"/"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 6 #")    ("
0 0 14 3 3 #"Div"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"lhs"
0 0 25 3 3 #") ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"sqrt"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 5 #")   ("
0 0 14 3 4 #"Sqrt"
0 0 25 3 2 #" ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 14 3 5 #"value"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ["
0 0 14 3 4 #"else"
0 0 25 3 18 #"                 ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 1 #" "
0 0 19 3 18 #"\"bad syntax in ~s\""
0 0 25 3 1 #" "
0 0 14 3 5 #"sexpr"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 63
#";; parses a string containing a MUWAE expression to a MUWAE AST"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 11 #"parse-sexpr"
0 0 25 3 2 #" ("
0 0 14 3 13 #"string->sexpr"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 13 #"#| Formal spe"
0 0 17 3 15 #"cs for `subst':"
0 0 17 29 1 #"\n"
0 0 17 3 62
#"   (`N' is a <num>, `E1', `E2' are <MUWAE>s, `x' is some <id>,"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"   `y' is a *different* <id>)"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"      N[v/x]                = N"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"      {+ E1 E2}[v/x]        = {+ E1[v/x] E2[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"      {- E1 E2}[v/x]        = {- E1[v/x] E2[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 15 #"      {* E1 E2}"
0 0 17 3 34 #"[v/x]        = {* E1[v/x] E2[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 49 #"      {/ E1 E2}[v/x]        = {/ E1[v/x] E2[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 44 #"      {sqrt E1}[v/x]        = {sqrt E1[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"      y[v/x]                = y"
0 0 17 29 1 #"\n"
0 0 17 3 31 #"      x[v/x]                = v"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"      {with {y E1} E2}[v/x] = {with {y E1[v/x]} E2[v/x]}"
0 0 17 29 1 #"\n"
0 0 17 3 51 #"      {with {x E1} E2}[v/x] = {with {x E1[v/x]} E2}"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 6 #"Symbol"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; substitutes the second argument with the third argument in the"
0 0 25 29 1 #"\n"
0 0 17 3 66
#";; first argument, as per the rules of substitution; the resulting"
0 0 25 29 1 #"\n"
0 0 17 3 63
#";; expression contains no free instances of the second argument"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 4 #"expr"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Add"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Add"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Sub"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Sub"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Mul"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Mul"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Div"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 3 #"Div"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #") ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"Sqrt"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 2 #")("
0 0 14 3 4 #"Sqrt"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 3 #"rhs"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"Id"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 2 #") "
0 0 14 3 2 #"to"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"With"
0 0 25 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 25 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"With"
0 0 25 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 3 #"eq?"
0 0 25 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"             "
0 0 14 3 10 #"bound-body"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"             ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 25 3 1 #" "
0 0 14 3 4 #"from"
0 0 25 3 1 #" "
0 0 14 3 2 #"to"
0 0 25 3 6 #")))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 27 #"#| Formal specs for `eval':"
0 0 17 29 1 #"\n"
0 0 17 3 56 #"     (PN is a MUWAE that evaluates to a positive number,"
0 0 17 29 1 #"\n"
0 0 17 3 55 #"     NN is a MUWAE that evaluates to a negative number)"
0 0 17 29 1 #"\n"
0 0 17 3 24 #"     eval(N)         = N"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"     eval({+ E1 E2}) = eval(E1) + eval(E2)"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"     eval({- E1 E2}) = eval(E1) - eval(E2)"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"     eval({* E1 E2}) = eval(E1) * eval(E2)"
0 0 17 29 1 #"\n"
0 0 17 3 42 #"     eval({/ E1 E2}) = eval(E1) / eval(E2)"
0 0 17 29 1 #"\n"
0 0 17 3 37 #"     eval({sqrt PN}) = sqrt(eval(PN))"
0 0 17 29 1 #"\n"
0 0 17 3 28 #"     eval({sqrt NN}) = error"
0 0 17 3 1 #"!"
0 0 17 29 1 #"\n"
0 0 17 3 29 #"     eval(id)        = error!"
0 0 17 29 1 #"\n"
0 0 17 3 50 #"     eval({with {x E1} E2}) = eval(E2[eval(E1)/x])"
0 0 17 29 1 #"\n"
0 0 17 3 2 #"|#"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"MUWAE"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 58
#";; evaluates MUWAE expressions by reducing them to numbers"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"cases"
0 0 25 3 1 #" "
0 0 14 3 4 #"expr"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Num"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #") "
0 0 14 3 1 #"n"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Add"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 1 #"+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Sub"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Mul"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 1 #"*"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 3 #"Div"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #") ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 1 #"/"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 3 #") ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"Sqrt"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 4 #")  ("
0 0 14 3 5 #"sqrt+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 1 #"r"
0 0 25 3 3 #"))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 4 #"With"
0 0 25 3 1 #" "
0 0 14 3 8 #"bound-id"
0 0 25 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 25 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"     ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 5 #"subst"
0 0 25 3 1 #" "
0 0 14 3 10 #"bound-body"
0 0 25 29 1 #"\n"
0 0 25 3 18 #"                  "
0 0 14 3 8 #"bound-id"
0 0 25 29 1 #"\n"
0 0 25 3 19 #"                  ("
0 0 14 3 3 #"Num"
0 0 25 3 2 #" ("
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 14 3 10 #"named-expr"
0 0 25 3 5 #"))))]"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"    [("
0 0 14 3 2 #"Id"
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 3 #") ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 4 #"eval"
0 0 25 3 1 #" "
0 0 19 3 21 #"\"free identifier: ~s\""
0 0 25 3 1 #" "
0 0 14 3 4 #"name"
0 0 25 3 4 #")]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 5 #"sqrt+"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; a version of `sqrt' that takes a list of numbers, and return a"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; list with twice the elements, holding the two roots of each of"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";; the inputs; throws an error if any input is negative."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 5 #"sqrt+"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 2 #") "
0 0 14 3 4 #"null"
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"        [("
0 0 14 3 1 #"<"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"         ("
0 0 14 3 5 #"error"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 14 3 5 #"sqrt+"
0 0 25 3 1 #" "
0 0 19 3 38 #"\"`sqrt' requires a non-negative input\""
0 0 25 3 2 #")]"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"        ["
0 0 14 3 4 #"else"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                    ("
0 0 14 3 4 #"cons"
0 0 25 3 2 #" ("
0 0 14 3 1 #"-"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sqrt"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 5 #"))) ("
0 0 14 3 5 #"sqrt+"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"ns"
0 0 25 3 7 #"))))]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"   ("
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 3 #") ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"   "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";; applies a binary numeric function on all combinations"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";; of numbers from the two input lists, and return the"
0 0 25 29 1 #"\n"
0 0 17 3 29 #";; list of all of the results"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 1 #" "
0 0 14 3 2 #"rs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"helper"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #") "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 2 #"rs"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 7 #"      ("
0 0 14 3 2 #"op"
0 0 25 3 1 #" "
0 0 14 3 1 #"l"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 2 #"rs"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 5 #"null?"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 4 #"    "
0 0 14 3 4 #"null"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 6 #"append"
0 0 25 3 2 #" ("
0 0 14 3 6 #"helper"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 2 #") "
0 0 14 3 2 #"rs"
0 0 25 3 3 #") ("
0 0 14 3 6 #"bin-op"
0 0 25 3 1 #" "
0 0 14 3 2 #"op"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 2 #"ls"
0 0 25 3 2 #") "
0 0 14 3 2 #"rs"
0 0 25 3 4 #"))))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 14 3 1 #":"
0 0 25 3 1 #" "
0 0 14 3 6 #"String"
0 0 25 3 1 #" "
0 0 14 3 2 #"->"
0 0 25 3 2 #" ("
0 0 14 3 6 #"Listof"
0 0 25 3 1 #" "
0 0 14 3 6 #"Number"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";; evaluate a MUWAE program contained in a string"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 4 #"eval"
0 0 25 3 2 #" ("
0 0 14 3 5 #"parse"
0 0 25 3 1 #" "
0 0 14 3 3 #"str"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 8 #";; tests"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"5\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"{+ 5 5}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 28 #"\"{with {x {+ 5 5}} {+ x x}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"{with {x 5} {+ x x}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 47 #"\"{with {x {+ 5 5}} {with {y {- x 3}} {+ y y}}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"14"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 41 #"\"{with {x 5} {with {y {- x 3}} {+ y y}}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 36 #"\"{with {x 5} {+ x {with {x 3} 10}}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"15"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 35 #"\"{with {x 5} {+ x {with {x 3} x}}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"8"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 35 #"\"{with {x 5} {+ x {with {y 3} x}}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"{with {x 5} {with {y x} y}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"{with {x 5} {with {x x} x}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"5"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"{with {x 1} y}\""
0 0 25 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"free identifier\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 9 #"\"{* 4 5}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"{/ 20 5}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 14 #"\"{* 20 20 20}\""
0 0 25 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"bad syntax\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"{with {x -1 2}}\""
0 0 25 3 2 #") "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 19 #"\"bad `with' syntax\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 22 #"\"{with {x 4} {* x 5}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 24 #"\"{with {x 100} {/ x 5}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 2 #"20"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"{sqrt 9}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"{sqrt 1}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"{sqrt 0}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 11 #"\"{sqrt -1}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 7 #"=error>"
0 0 25 3 1 #" "
0 0 19 3 38 #"\"`sqrt' requires a non-negative input\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 23 #"\"{with {x 9} {sqrt x}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-3"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 16 #"\"{+ {sqrt 1} 3}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 37 #"\"{+ {/ {+ {sqrt 1} 3} 2} {sqrt 100}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 2 #"12"
0 0 25 3 1 #" "
0 0 22 3 2 #"-8"
0 0 25 3 1 #" "
0 0 22 3 2 #"11"
0 0 25 3 1 #" "
0 0 22 3 2 #"-9"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 42 #"\"{sqrt {+ 16 {* {+ 1 {sqrt 1}} {/ 9 2}}}}\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 6 #"      "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"5"
0 0 25 3 1 #" "
0 0 22 3 2 #"-5"
0 0 25 3 1 #" "
0 0 22 3 1 #"4"
0 0 25 3 1 #" "
0 0 22 3 2 #"-4"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 4 #"test"
0 0 25 3 2 #" ("
0 0 14 3 3 #"run"
0 0 25 3 1 #" "
0 0 19 3 29 #"\"{with {x {sqrt 4}} {+ 1 x}}\""
0 0 25 3 2 #") "
0 0 14 3 2 #"=>"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 13 #"minutes-spent"
0 0 25 3 1 #" "
0 0 22 3 3 #"135"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0           0           0 0           0 11 0 52 3 11 #"Welcome to "
0 0 54 3 8 #"DrRacket"
0 0 52 3 19 #", version 6.7 [3m]."
0 0 52 29 1 #"\n"
0 0 52 3 10 #"Language: "
0 0 55 3 21 #"pl 03, with debugging"
0 0 52 3 16 #"; memory limit: "
0 0 55 3 6 #"512 MB"
0 0 52 3 1 #"."
0 0 52 29 1 #"\n"
0 0 4 3 2 #"> "
0           0
